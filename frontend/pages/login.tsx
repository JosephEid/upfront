import Head from "next/head";
import { Box, Button, Center, Divider, Input, Text } from "@chakra-ui/react";
import Layout from "@/components/Layout";
import React, { useState } from "react";
import { isSignedIn } from "./api/signed_in";
import { GetServerSideProps } from "next";
import { PageProps } from ".";

export default function Login(props: PageProps) {
    const [email, setEmail] = useState("");
    const [error, setError] = useState(false);
    const [complete, setComplete] = useState(false);
    const [noJobsFound, setNoJobsFound] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const submitClicked = async () => {
        setError(false);
        setComplete(false);
        setNoJobsFound(false);
        setIsLoading(true);
        const startChallengeRes = await fetch("/api/start_challenge", {
            body: JSON.stringify({ email: email.toLocaleLowerCase() }),
            method: "POST",
        });
        setIsLoading(false);

        const resBody = await startChallengeRes.json();
        if (startChallengeRes.status !== 200) {
            setError(true);
            return;
        }
        if (resBody.jobsFound && resBody.challengeStarted) {
            setComplete(true);
            return;
        }
        if (!resBody.jobsFound) {
            setNoJobsFound(true);
            return;
        }
    };
    return (
        <>
            <Head>
                <title>Upfront - Login</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link
                    rel="icon"
                    href="/upfront/svg/favicon-no-background.svg"
                />
            </Head>
            <Layout signedIn={props.signedIn}>
                <Center>
                    <Box>
                        <Text fontSize={"2.5rem"} fontWeight={700} my="1rem">
                            Login
                        </Text>

                        {!error && !complete && !noJobsFound && (
                            <>
                                <Text>
                                    Log in below to manage and view Jobs that
                                    you have posted.
                                </Text>
                                <Input
                                    type="email"
                                    placeholder="Enter your email address."
                                    my="1rem"
                                    value={email}
                                    onChange={(e) => setEmail(e.target.value)}
                                />
                                <Divider mb="1rem" />
                                <Button
                                    width="100%"
                                    onClick={async () => await submitClicked()}
                                    isLoading={isLoading}
                                >
                                    Submit
                                </Button>
                            </>
                        )}
                        {error && (
                            <Text>
                                Something went wrong, please try again later...
                            </Text>
                        )}
                        {complete && (
                            <Text>
                                Magic link sent to {email}, please check your
                                email inbox!
                            </Text>
                        )}
                        {noJobsFound && (
                            <Text>
                                No jobs found, please use the email you used to
                                create your job post.
                            </Text>
                        )}
                    </Box>
                </Center>
            </Layout>
        </>
    );
}

export const getServerSideProps = (async (context) => {
    const signedIn = await isSignedIn();
    if (signedIn) {
        return {
            redirect: {
                destination: "/dashboard",
                permanent: false,
            },
        };
    }

    return { props: { signedIn } };
}) satisfies GetServerSideProps<PageProps>;
