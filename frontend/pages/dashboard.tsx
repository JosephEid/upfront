import Head from "next/head";
import {
    Button,
    Table,
    TableContainer,
    Tbody,
    Td,
    Text,
    Th,
    Thead,
    Tr,
} from "@chakra-ui/react";
import Layout from "@/components/Layout";
import React from "react";
import { GetServerSideProps } from "next";
import { Amplify } from "aws-amplify";
import { isSignedIn } from "./api/signed_in";
import { JobPostItem } from "./api/checkout_session/[id]";
import { getRecruiterJobs } from "./api/recruiter_jobs";
import { PageProps } from ".";

interface DashboardProps extends PageProps {
    jobs: JobPostItem[];
    email: string;
}

Amplify.configure({
    Auth: {
        Cognito: {
            userPoolId: "eu-west-2_Cm0yER0fG",
            userPoolClientId: "p63epfbef86asirih4ec51f8",
            loginWith: {
                email: true,
            },
        },
    },
});

export default function Dashboard(props: DashboardProps) {
    return (
        <>
            <Head>
                <title>Upfront - Recruiter Dashboard</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link
                    rel="icon"
                    href="/upfront/svg/favicon-no-background.svg"
                />
            </Head>
            <Layout signedIn={props.signedIn}>
                <Text fontSize={"2.5rem"} fontWeight={700} my="1rem">
                    Dashboard for {props.email}
                </Text>
                <Text fontSize={"2rem"} fontWeight={700} my="1rem">
                    Jobs you've posted
                </Text>
                <TableContainer>
                    <Table>
                        <Thead>
                            <Tr>
                                <Th>Title</Th>
                                <Th>Location</Th>
                                <Th>Created At</Th>
                                <Th>Last Updated</Th>
                                <Th>Plan Type</Th>
                                <Th>Duration</Th>
                                <Th>Expires At</Th>
                                <Th>No. Apply Clicks</Th>
                                <Th>View/Manage</Th>
                            </Tr>
                        </Thead>
                        <Tbody>
                            {props.jobs &&
                                props.jobs?.map((x, i) => {
                                    return (
                                        <Tr key={i}>
                                            <Td>{x.title}</Td>
                                            <Td>{x.location}</Td>
                                            <Td>{x.createdAt}</Td>
                                            <Td>{x.updatedAt}</Td>
                                            <Td>{x.planType}</Td>
                                            <Td>{x.planDuration}</Td>
                                            <Td>{x.expiresAt}</Td>
                                            <Td>{x.clickedApplyCount}</Td>
                                            <Td>
                                                <Button onClick={() => {}}>
                                                    View
                                                </Button>
                                            </Td>
                                        </Tr>
                                    );
                                })}
                        </Tbody>
                    </Table>
                </TableContainer>
                {!props.jobs ||
                    (props.jobs.length === 0 && (
                        <Text>No Jobs Posted Yet...</Text>
                    ))}
            </Layout>
        </>
    );
}

export const getServerSideProps = (async (context) => {
    const signedIn = await isSignedIn();
    if (!signedIn) {
        return {
            redirect: {
                destination: "/login",
                permanent: false,
            },
        };
    }

    const data = await getRecruiterJobs();
    return { props: { jobs: data.jobs, email: data.email, signedIn } };
}) satisfies GetServerSideProps<DashboardProps>;
