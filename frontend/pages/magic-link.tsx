import Head from "next/head";
import { Center, Text } from "@chakra-ui/react";
import Layout from "@/components/Layout";
import React from "react";
import { GetServerSideProps } from "next";
import { signIn, confirmSignIn } from "aws-amplify/auth";
import { isSignedIn } from "./api/signed_in";
import { PageProps } from ".";

interface MagicLinkProps extends PageProps {
    email: string;
    token: string;
}

export default function Login(props: MagicLinkProps) {
    return (
        <>
            <Head>
                <title>Upfront - Login</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link
                    rel="icon"
                    href="/upfront/svg/favicon-no-background.svg"
                />
            </Head>
            <Layout signedIn={props.signedIn}>
                <Center>
                    <Text>Login successful, redirecting to dashboard...</Text>
                </Center>
            </Layout>
        </>
    );
}

export const getServerSideProps = (async (context) => {
    const signedIn = await isSignedIn();
    if (signedIn) {
        return {
            redirect: {
                destination: "/dashboard",
                permanent: false,
            },
        };
    }

    const props: MagicLinkProps = {
        email: context.query.email as string,
        token: context.query.token as string,
        signedIn: signedIn,
    };

    const cognitoUser = await signIn({
        username: props.email,
        options: { authFlowType: "CUSTOM_WITHOUT_SRP" },
    });
    try {
        const challengeResult = await confirmSignIn({
            challengeResponse: props.token,
        });

        if (challengeResult.isSignedIn) {
            return {
                redirect: {
                    destination: "/dashboard",
                    permanent: false,
                },
            };
        } else {
            return {
                redirect: {
                    destination: "/error",
                    permanent: false,
                },
            };
        }
    } catch (err) {
        console.log(err);
    }

    return { props: props };
}) satisfies GetServerSideProps<MagicLinkProps>;
