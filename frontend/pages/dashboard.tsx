import Head from "next/head";
import { Box, Button, Center, Divider, Input, Text } from "@chakra-ui/react";
import Layout from "@/components/Layout";
import React, { useEffect, useState } from "react";
import { GetServerSideProps } from "next";
import { signIn, confirmSignIn, getCurrentUser } from "aws-amplify/auth";
import { Amplify } from "aws-amplify";
import { isSignedIn } from "./api/signed_in";
import { JobPostItem } from "./api/checkout_session/[id]";
import { getRecruiterJobs } from "./api/recruiter_jobs";
import { JobPost } from "@/components/JobPost";

interface DashboardProps {
    jobs: JobPostItem[];
    email: string;
}

Amplify.configure({
    Auth: {
        Cognito: {
            userPoolId: "eu-west-2_mXJEXo9bq",
            userPoolClientId: "4krvn7bk6oeg0vavpt73igam23",
            loginWith: {
                email: true,
            },
        },
    },
});

export default function Dashboard(props: DashboardProps) {
    return (
        <>
            <Head>
                <title>Upfront - Recruiter Dashboard</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link
                    rel="icon"
                    href="/upfront/svg/favicon-no-background.svg"
                />
            </Head>
            <Layout>
                <Text fontSize={"2.5rem"} fontWeight={700} my="1rem">
                    Dashboard for {props.email}
                </Text>
                {props.jobs &&
                    props.jobs?.map((x, i) => {
                        return (
                            <Box my="1rem" key={i}>
                                <JobPost {...x} />
                            </Box>
                        );
                    })}
                {!props.jobs ||
                    (props.jobs.length === 0 && (
                        <Text>No Jobs found matching your criteria...</Text>
                    ))}
            </Layout>
        </>
    );
}

export const getServerSideProps = (async (context) => {
    const signedIn = await isSignedIn();
    if (!signedIn) {
        return {
            redirect: {
                destination: "/login",
                permanent: false,
            },
        };
    }

    const data = await getRecruiterJobs();
    return { props: { jobs: data.jobs, email: data.email } };
}) satisfies GetServerSideProps<DashboardProps>;
