import Head from "next/head";
import React from "react";
import {
    Box,
    Button,
    Center,
    Checkbox,
    FormControl,
    FormErrorMessage,
    FormLabel,
    HStack,
    Image,
    Input,
    Select,
    Stack,
    Text,
    useRadio,
    useRadioGroup,
} from "@chakra-ui/react";

const SimpleMdeReact = dynamic(() => import("react-simplemde-editor"), {
    ssr: false,
});
import { FC, ReactNode, useCallback, useRef } from "react";
import dynamic from "next/dynamic";
import "easymde/dist/easymde.min.css";
import Layout from "@/components/Layout";
import { Control, useController, useForm } from "react-hook-form";
import { Currency, JobPost } from "@/components/JobPost";
import { priceFactors } from "@/config";
import { fetchPostJSON } from "@/lib/api-utils";
import { CheckoutSessionResponse } from "./api/checkout_session";

export type PlanType = "Standard" | "Premium";
export type JobPostStatus = "pending" | "active" | "inactive";

export default function PostJob() {
    const onChange = useCallback((value: string) => {
        setValue("description", value);
    }, []);

    const defaultValues: JobPostFormProps = {
        companyLogoURL: "",
        companyName: "",
        companyWebsite: "",
        currency: "GBP",
        howToApply: "",
        location: "",
        description: "",
        maxSalary: 10000,
        minSalary: 5000,
        title: "",
        visaSponsorship: false,
        loginEmail: "",
        planDuration: 30,
        planType: "Premium",
    };

    const {
        register,
        formState: { errors, isSubmitting },
        setValue,
        watch,
        getValues,
        handleSubmit,
        control,
    } = useForm({ defaultValues: defaultValues });

    async function onSubmit(values: JobPostFormProps) {
        const checkoutSessionResponse: CheckoutSessionResponse =
            await fetchPostJSON("/api/checkout_session", values);

        window.location.href = checkoutSessionResponse.url;
    }

    const formValues = watch() as JobPostFormProps;

    console.log(formValues);
    return (
        <>
            <Head>
                <title>Upfront - Post a Job</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link
                    rel="icon"
                    href="/upfront/svg/favicon-no-background.svg"
                />
            </Head>
            <Layout>
                <Text fontSize={"2.5rem"} fontWeight={700} my="1rem">
                    Create a Job Post.
                </Text>
                <Text fontWeight={700} fontSize={"2rem"} mb="1rem">
                    We require that companies are{" "}
                    <Text as="span" fontWeight="800" color={"upfront.300"}>
                        Upfront
                    </Text>{" "}
                    about their salaries.
                </Text>
                <Text fontWeight={700} fontSize={"2rem"} mb="1rem">
                    All job postings must contain a salary range.
                </Text>
                <Center>
                    <JobPost {...formValues} />
                </Center>
                <Box my="1rem">
                    <form onSubmit={handleSubmit(onSubmit)}>
                        <Stack
                            direction={["column", "row"]}
                            width={"100%"}
                            gap={{ base: 0, md: "0.5rem" }}
                        >
                            <FormControl
                                width={{ base: "100%", md: "60%" }}
                                isInvalid={errors.title !== undefined}
                                mb={"1rem"}
                            >
                                <FormLabel htmlFor="title" display={"none"}>
                                    Job Title
                                </FormLabel>
                                <Input
                                    size={"lg"}
                                    id="title"
                                    {...register("title", {
                                        required: "This is required",
                                        minLength: {
                                            value: 2,
                                            message:
                                                "Minimum length should be 2",
                                        },
                                        maxLength: {
                                            value: 45,
                                            message:
                                                "Maximum length is 50 characters",
                                        },
                                    })}
                                    maxLength={45}
                                    type="text"
                                    placeholder="Job Title"
                                />
                                <FormErrorMessage>
                                    {errors.title?.message?.toString()}
                                </FormErrorMessage>
                            </FormControl>
                            <FormControl
                                width={{ base: "100%", md: "40%" }}
                                isInvalid={errors.location !== undefined}
                                mb={"1rem"}
                            >
                                <FormLabel htmlFor="location" display={"none"}>
                                    Job Location
                                </FormLabel>
                                <Input
                                    size={"lg"}
                                    id="location"
                                    {...register("location", {
                                        required: "This is required",
                                        minLength: {
                                            value: 2,
                                            message:
                                                "Minimum length should be 2",
                                        },
                                        maxLength: {
                                            value: 40,
                                            message:
                                                "Maximum length is 40 characters",
                                        },
                                    })}
                                    type="text"
                                    maxLength={40}
                                    placeholder="Job Location"
                                />
                                <FormErrorMessage>
                                    {errors.location?.message?.toString()}
                                </FormErrorMessage>
                            </FormControl>
                        </Stack>
                        <Stack
                            direction={["column", "row"]}
                            width={"100%"}
                            gap={{ base: 0, md: "0.5rem" }}
                        >
                            <FormControl
                                width={{ base: "100%", md: "40%" }}
                                isInvalid={errors.minSalary !== undefined}
                                mb={"1rem"}
                            >
                                <FormLabel htmlFor="minSalary" display={"none"}>
                                    Minimum Salary
                                </FormLabel>
                                <Input
                                    size={"lg"}
                                    type="number"
                                    placeholder="Min Annual Salary"
                                    id="minSalary"
                                    {...register("minSalary", {
                                        required: "This is required",
                                        valueAsNumber: true,
                                    })}
                                />
                                <FormErrorMessage>
                                    {errors.minSalary?.message?.toString()}
                                </FormErrorMessage>
                            </FormControl>
                            <FormControl
                                width={{ base: "100%", md: "40%" }}
                                isInvalid={errors.maxSalary !== undefined}
                                mb={"1rem"}
                            >
                                <FormLabel htmlFor="maxSalary" display={"none"}>
                                    Maximum Salary
                                </FormLabel>
                                <Input
                                    size={"lg"}
                                    type="number"
                                    placeholder="Max Annual Salary"
                                    id="maxSalary"
                                    {...register("maxSalary", {
                                        required: "This is required",
                                        valueAsNumber: true,
                                    })}
                                />
                                <FormErrorMessage>
                                    {errors.maxSalary?.message?.toString()}
                                </FormErrorMessage>
                            </FormControl>
                            <FormControl
                                width={{ base: "100%", md: "20%" }}
                                isInvalid={errors.currency !== undefined}
                                mb={"1rem"}
                            >
                                <FormLabel htmlFor="currency" display={"none"}>
                                    Currency
                                </FormLabel>
                                <Select
                                    size={"lg"}
                                    id="currency"
                                    {...register("currency", {
                                        required: "This is required",
                                    })}
                                >
                                    <option>GBP</option>
                                    <option>USD</option>
                                    <option>EUR</option>
                                    <option>AUD</option>
                                    <option>CAD</option>
                                    <option>SGD</option>
                                    <option>CHF</option>
                                    <option>INR</option>
                                    <option>JPY</option>
                                </Select>
                                <FormErrorMessage>
                                    {errors.currency?.message?.toString()}
                                </FormErrorMessage>
                            </FormControl>
                        </Stack>
                        <Stack
                            direction={["column", "row"]}
                            width={"100%"}
                            gap={{ base: 0, md: "0.5rem" }}
                        >
                            <FormControl
                                width={{ base: "100%", md: "40%" }}
                                isInvalid={errors.companyName !== undefined}
                                mb={"1rem"}
                            >
                                <FormLabel
                                    htmlFor="companyName"
                                    display={"none"}
                                >
                                    Company Name
                                </FormLabel>
                                <Input
                                    size={"lg"}
                                    id="companyName"
                                    {...register("companyName", {
                                        required: "This is required",
                                        minLength: {
                                            value: 2,
                                            message:
                                                "Minimum length should be 2",
                                        },
                                    })}
                                    type="text"
                                    placeholder="Company Name"
                                />
                                <FormErrorMessage>
                                    {errors.companyName?.message?.toString()}
                                </FormErrorMessage>
                            </FormControl>
                            <FormControl
                                width={{ base: "100%", md: "60%" }}
                                isInvalid={errors.companyWebsite !== undefined}
                                mb={"1rem"}
                            >
                                <FormLabel
                                    htmlFor="companyWebsite"
                                    display={"none"}
                                >
                                    Company Website
                                </FormLabel>
                                <Input
                                    size={"lg"}
                                    id="companyWebsite"
                                    {...register("companyWebsite", {
                                        required: "This is required",
                                        minLength: {
                                            value: 2,
                                            message:
                                                "Minimum length should be 2",
                                        },
                                    })}
                                    type="text"
                                    placeholder="Company Website"
                                    mb="0.5rem"
                                />
                                <FormErrorMessage>
                                    {errors.companyWebsite?.message?.toString()}
                                </FormErrorMessage>
                            </FormControl>
                        </Stack>
                        <FormControl
                            isInvalid={errors.companyLogoURL !== undefined}
                            mb={"1rem"}
                        >
                            <FormLabel htmlFor="companyLogoURL" display="none">
                                Company Logo URL
                            </FormLabel>
                            <HStack>
                                <Input
                                    size={"lg"}
                                    id="companyLogoURL"
                                    {...register("companyLogoURL", {
                                        minLength: {
                                            value: 2,
                                            message:
                                                "Minimum length should be 2",
                                        },
                                    })}
                                    type="url"
                                    placeholder="Company Logo URL"
                                    width={{ base: "100%", md: "50%" }}
                                />
                                <Box
                                    minWidth={{ base: "50px", md: "100px" }}
                                    minHeight={{ base: "50px", md: "100px" }}
                                    maxWidth={{ base: "50px", md: "100px" }}
                                    maxHeight={{ base: "50px", md: "100px" }}
                                    margin="1rem"
                                >
                                    {formValues.companyLogoURL === "" ? (
                                        <Text>Logo Preview</Text>
                                    ) : (
                                        <Image
                                            src={formValues.companyLogoURL}
                                            alt="Company logo"
                                            minWidth={{
                                                base: "50px",
                                                md: "100px",
                                            }}
                                            minHeight={{
                                                base: "50px",
                                                md: "100px",
                                            }}
                                            borderRadius={"5px"}
                                        />
                                    )}
                                </Box>
                            </HStack>

                            <FormErrorMessage>
                                {errors.companyLogoURL?.message?.toString()}
                            </FormErrorMessage>
                        </FormControl>

                        <FormControl
                            isInvalid={errors.description !== undefined}
                            mb={"1rem"}
                        >
                            <FormLabel htmlFor="description" display={"none"}>
                                Description
                            </FormLabel>
                            <SimpleMdeReact
                                id="description"
                                {...register("description", {
                                    required: "This is required",
                                })}
                                style={{
                                    width: "100%",
                                }}
                                onChange={onChange}
                            />
                            <FormErrorMessage>
                                {errors.description?.message?.toString()}
                            </FormErrorMessage>
                        </FormControl>

                        <FormControl
                            isInvalid={errors.visaSponsorship !== undefined}
                            mb={"1rem"}
                        >
                            <FormLabel
                                htmlFor="visaSponsorship"
                                display={"none"}
                            >
                                Visa Sponsorship
                            </FormLabel>
                            <Checkbox
                                size={"lg"}
                                id="visaSponsorship"
                                {...register("visaSponsorship", {})}
                            >
                                VISA Sponsorship offered?
                            </Checkbox>
                        </FormControl>

                        <FormControl
                            isInvalid={errors.howToApply !== undefined}
                            mb={"1rem"}
                        >
                            <FormLabel htmlFor="howToApply" display={"none"}>
                                How To Apply
                            </FormLabel>
                            <Input
                                size="lg"
                                type="text"
                                id="howToApply"
                                placeholder="How to apply (URL)"
                                {...register("howToApply", {
                                    required: "This is required",
                                    minLength: {
                                        value: 2,
                                        message: "Minimum length should be 2",
                                    },
                                })}
                            />
                            <FormErrorMessage>
                                {errors.howToApply?.message?.toString()}
                            </FormErrorMessage>
                        </FormControl>
                        <FormControl
                            isInvalid={errors.loginEmail !== undefined}
                            mb={"1rem"}
                        >
                            <FormLabel htmlFor="yourEmail" display={"none"}>
                                Your Email
                            </FormLabel>
                            <Input
                                size="lg"
                                type="email"
                                placeholder="Your email (will be used to log in)"
                                id="loginEmail"
                                {...register("loginEmail", {
                                    required: "This is required",
                                    minLength: {
                                        value: 2,
                                        message: "Minimum length should be 2",
                                    },
                                })}
                            />
                            <FormErrorMessage>
                                {errors.loginEmail?.message?.toString()}
                            </FormErrorMessage>
                        </FormControl>
                        <Center>
                            <JobPost {...formValues} />
                        </Center>
                        <Box
                            my={"2rem"}
                            background={"upfront.300"}
                            color="white"
                            padding={"1rem"}
                            borderRadius="5px"
                            fontWeight={800}
                            boxShadow={"lg"}
                        >
                            <Text fontSize={"2rem"} my="1rem">
                                Pricing plans
                            </Text>
                            <Text fontSize={"1.5rem"} my="1rem">
                                Please select how long you&apos;d like to
                                advertise your Job with us:
                            </Text>
                            <FormControl
                                width={{ base: "100%", md: "30%" }}
                                isInvalid={errors.planDuration !== undefined}
                                mb={"1rem"}
                            >
                                <FormLabel
                                    htmlFor="planDuration"
                                    display={"none"}
                                >
                                    Plan Duration
                                </FormLabel>
                                <Select
                                    size={"lg"}
                                    id="planDuration"
                                    background={"white"}
                                    color="black"
                                    width={{ base: "100%" }}
                                    {...register("planDuration", {
                                        required: "This is required",
                                        valueAsNumber: true,
                                    })}
                                >
                                    {[1, 2, 3, 4, 5, 6].map((x) => {
                                        return (
                                            <option key={x * 30} value={x * 30}>
                                                {x * 30} Days
                                            </option>
                                        );
                                    })}
                                </Select>
                                <FormErrorMessage>
                                    {errors.planDuration?.message?.toString()}
                                </FormErrorMessage>
                            </FormControl>
                            <PlanTypes
                                control={control}
                                duration={getValues("planDuration")}
                            />
                            <Center>
                                <Button
                                    size={"lg"}
                                    fontSize={"1.5rem"}
                                    fontWeight={600}
                                    color={"black"}
                                    _hover={{
                                        bg: "upfront.200",
                                    }}
                                    type="submit"
                                    bg="white"
                                    isLoading={isSubmitting}
                                >
                                    Post Job
                                </Button>
                            </Center>
                        </Box>
                    </form>
                </Box>
            </Layout>
        </>
    );
}

const PlanTypes: FC<{
    control: Control<JobPostFormProps, any>;
    duration: number;
}> = ({ control, duration }) => {
    const {
        field,
        formState: { errors },
    } = useController({
        control,
        name: "planType",
        rules: { required: { value: true, message: "Required field" } },
    });
    const { getRootProps, getRadioProps } = useRadioGroup({
        name: "planType",
        onChange: field.onChange,
        value: field.value,
    });

    const group = getRootProps();

    return (
        <FormControl isRequired={true} isInvalid={!!errors.planType} mb={6}>
            <FormLabel display={"none"}>planType</FormLabel>
            <Stack direction={["column", "row"]} width={"100%"} {...group}>
                {["Standard" as PlanType, "Premium" as PlanType].map(
                    (value: PlanType) => {
                        const radio = getRadioProps({ value });
                        return (
                            <RadioCard
                                key={value}
                                duration={duration}
                                planType={value}
                                {...radio}
                            >
                                {value}
                            </RadioCard>
                        );
                    }
                )}
            </Stack>
            <FormErrorMessage>{errors.planType?.message}</FormErrorMessage>
        </FormControl>
    );
};

const RadioCard: FC<any> = (props) => {
    const { getInputProps, getCheckboxProps } = useRadio(props);

    const input = getInputProps();
    const checkbox = getCheckboxProps();

    return (
        <Box as="label" width={{ base: "100%", md: "50%" }}>
            <input {...input} />
            <Box
                {...checkbox}
                textAlign={"center"}
                padding="1rem"
                border={"1px solid"}
                borderRadius="5px"
                borderColor={"upfront.300"}
                background={"white"}
                color="black"
                fontSize={"1.5rem"}
                boxShadow={"lg"}
                cursor="pointer"
                borderWidth="1px"
                _checked={{
                    bg: "pink.500",
                    color: "white",
                    borderColor: "pink.500",
                }}
                _focus={{
                    boxShadow: "outline",
                }}
                px={5}
                py={3}
            >
                <Text fontSize={"2rem"}>The {props.children} Plan</Text>
                <Text fontWeight={800} fontSize={"2rem"}>
                    £
                    {(props.duration *
                        priceFactors[props.planType as PlanType]) /
                        30}
                </Text>
                {props.children}
            </Box>
        </Box>
    );
};

export interface JobPostFormProps {
    companyLogoURL: string;
    companyName: string;
    companyWebsite: string;
    currency: Currency;
    description: string;
    howToApply: string;
    location: string;
    maxSalary: number;
    minSalary: number;
    title: string;
    visaSponsorship: false;
    loginEmail: string;
    planDuration: number;
    planType: PlanType;
}
