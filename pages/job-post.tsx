import Head from "next/head";
import Navbar from "../components/Navbar";
import {
    Box,
    Button,
    Center,
    Checkbox,
    Container,
    FormControl,
    FormErrorMessage,
    FormLabel,
    HStack,
    Icon,
    Image,
    Input,
    Select,
    Stack,
    Text,
    VStack,
} from "@chakra-ui/react";
import { FaMapPin } from "react-icons/fa";

const SimpleMdeReact = dynamic(() => import("react-simplemde-editor"), {
    ssr: false,
});
import { useCallback, useRef, useState } from "react";
import dynamic from "next/dynamic";
import "easymde/dist/easymde.min.css";
import { AddIcon } from "@chakra-ui/icons";
import Markdown from "react-markdown";
import Layout from "@/components/Layout";
import { useForm } from "react-hook-form";

export default function Home() {
    const hiddenFileInput = useRef(null);
    const onChange = useCallback((value: string) => {
        setValue("description", value);
    }, []);

    const [fileName, setFileName] = useState<string>();

    const handleClick = () => {
        if (hiddenFileInput.current) {
            (hiddenFileInput?.current as any).click();
        }
    };

    function fileUploadInputChange(e: any) {
        let reader = new FileReader();
        reader.onload = function (e) {
            setValue("companyLogo", e.target?.result as string);
        };
        reader.readAsDataURL(e.target.files[0]);
        setFileName(e.target.files[0].name);
    }

    const defaultValues: JobPostProps = {
        companyLogo: "",
        companyName: "",
        companyWebsite: "",
        currency: "GBP",
        howToApply: "",
        location: "",
        description: "",
        maxSalary: "",
        minSalary: "",
        title: "",
        visaSponsorship: false,
        yourEmail: "",
    };

    const {
        handleSubmit,
        register,
        formState: { errors, isSubmitting },
        setValue,
        watch,
        getValues,
    } = useForm({ defaultValues: defaultValues });

    function onSubmit(values: any) {
        return new Promise((resolve) => {
            setTimeout(() => {
                alert(JSON.stringify(values, null, 2));
                resolve(null);
            }, 3000);
        });
    }

    const formValues = watch() as JobPostProps;

    return (
        <>
            <Head>
                <title>Upfront - Post a Job</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link
                    rel="icon"
                    href="/upfront/svg/favicon-no-background.svg"
                />
            </Head>
            <Layout>
                <Text fontSize={"2.5rem"} fontWeight={700} my="1rem">
                    Create a Job Post.
                </Text>
                <Text fontWeight={700} fontSize={"2rem"} mb="1rem">
                    We require that companies are{" "}
                    <Text as="span" fontWeight="800" color={"upfront.300"}>
                        Upfront
                    </Text>{" "}
                    about their salaries.
                </Text>
                <Text fontWeight={700} fontSize={"2rem"} mb="1rem">
                    All job postings must contain a salary range.
                </Text>
                <Center>
                    <JobPost {...formValues} />
                </Center>
                <Box mb="1rem">
                    <form onSubmit={handleSubmit(onSubmit)}>
                        <Stack
                            direction={["column"]}
                            gap={"0"}
                            align="flex-start"
                            height="3rem"
                            marginTop="2rem"
                        >
                            <Stack
                                direction={["column", "row"]}
                                width={"100%"}
                                gap={{ base: 0, md: "0.5rem" }}
                            >
                                <FormControl
                                    width={{ base: "100%", md: "60%" }}
                                    isInvalid={errors.title !== undefined}
                                    mb={"1rem"}
                                >
                                    <FormLabel htmlFor="title" display={"none"}>
                                        Job Title
                                    </FormLabel>
                                    <Input
                                        size={"lg"}
                                        id="title"
                                        {...register("title", {
                                            required: "This is required",
                                            minLength: {
                                                value: 2,
                                                message:
                                                    "Minimum length should be 2",
                                            },
                                            maxLength: {
                                                value: 45,
                                                message:
                                                    "Maximum length is 50 characters",
                                            },
                                        })}
                                        maxLength={45}
                                        type="text"
                                        placeholder="Job Title"
                                    />
                                    <FormErrorMessage>
                                        {errors.title?.message?.toString()}
                                    </FormErrorMessage>
                                </FormControl>
                                <FormControl
                                    width={{ base: "100%", md: "40%" }}
                                    isInvalid={errors.location !== undefined}
                                    mb={"1rem"}
                                >
                                    <FormLabel
                                        htmlFor="location"
                                        display={"none"}
                                    >
                                        Job Location
                                    </FormLabel>
                                    <Input
                                        size={"lg"}
                                        id="location"
                                        {...register("location", {
                                            required: "This is required",
                                            minLength: {
                                                value: 2,
                                                message:
                                                    "Minimum length should be 2",
                                            },
                                            maxLength: {
                                                value: 40,
                                                message:
                                                    "Maximum length is 40 characters",
                                            },
                                        })}
                                        type="text"
                                        maxLength={40}
                                        placeholder="Job Location"
                                    />
                                    <FormErrorMessage>
                                        {errors.location?.message?.toString()}
                                    </FormErrorMessage>
                                </FormControl>
                            </Stack>
                            <Stack
                                direction={["column", "row"]}
                                width={"100%"}
                                gap={{ base: 0, md: "0.5rem" }}
                            >
                                <FormControl
                                    width={{ base: "100%", md: "45%" }}
                                    isInvalid={errors.minSalary !== undefined}
                                    mb={"1rem"}
                                >
                                    <FormLabel
                                        htmlFor="minSalary"
                                        display={"none"}
                                    >
                                        Minimum Salary
                                    </FormLabel>
                                    <Input
                                        size={"lg"}
                                        type="number"
                                        placeholder="Min Annual Salary"
                                        id="minSalary"
                                        {...register("minSalary", {
                                            required: "This is required",
                                        })}
                                    />
                                    <FormErrorMessage>
                                        {errors.minSalary?.message?.toString()}
                                    </FormErrorMessage>
                                </FormControl>
                                <FormControl
                                    width={{ base: "100%", md: "45%" }}
                                    isInvalid={errors.maxSalary !== undefined}
                                    mb={"1rem"}
                                >
                                    <FormLabel
                                        htmlFor="maxSalary"
                                        display={"none"}
                                    >
                                        Maximum Salary
                                    </FormLabel>
                                    <Input
                                        size={"lg"}
                                        type="number"
                                        placeholder="Max Annual Salary"
                                        id="maxSalary"
                                        {...register("maxSalary", {
                                            required: "This is required",
                                        })}
                                    />
                                    <FormErrorMessage>
                                        {errors.maxSalary?.message?.toString()}
                                    </FormErrorMessage>
                                </FormControl>
                                <FormControl
                                    width={{ base: "100%", md: "10%" }}
                                    isInvalid={errors.currency !== undefined}
                                    mb={"1rem"}
                                >
                                    <FormLabel
                                        htmlFor="currency"
                                        display={"none"}
                                    >
                                        Currency
                                    </FormLabel>
                                    <Select
                                        size={"lg"}
                                        id="currency"
                                        {...register("currency", {
                                            required: "This is required",
                                        })}
                                    >
                                        <option>GBP</option>
                                        <option>USD</option>
                                        <option>EUR</option>
                                        <option>AUD</option>
                                        <option>CAD</option>
                                        <option>SGD</option>
                                        <option>CHF</option>
                                        <option>INR</option>
                                        <option>JPY</option>
                                    </Select>
                                    <FormErrorMessage>
                                        {errors.currency?.message?.toString()}
                                    </FormErrorMessage>
                                </FormControl>
                            </Stack>
                            <Stack
                                direction={["column", "row"]}
                                width={"100%"}
                                gap={{ base: 0, md: "0.5rem" }}
                            >
                                <FormControl
                                    width={{ base: "100%", md: "40%" }}
                                    isInvalid={errors.companyName !== undefined}
                                    mb={"1rem"}
                                >
                                    <FormLabel
                                        htmlFor="companyName"
                                        display={"none"}
                                    >
                                        Company Name
                                    </FormLabel>
                                    <Input
                                        size={"lg"}
                                        id="companyName"
                                        {...register("companyName", {
                                            required: "This is required",
                                            minLength: {
                                                value: 2,
                                                message:
                                                    "Minimum length should be 2",
                                            },
                                        })}
                                        type="text"
                                        placeholder="Company Name"
                                    />
                                    <FormErrorMessage>
                                        {errors.companyName?.message?.toString()}
                                    </FormErrorMessage>
                                </FormControl>
                                <FormControl
                                    width={{ base: "100%", md: "60%" }}
                                    isInvalid={
                                        errors.companyWebsite !== undefined
                                    }
                                    mb={"1rem"}
                                >
                                    <FormLabel
                                        htmlFor="companyWebsite"
                                        display={"none"}
                                    >
                                        Company Website
                                    </FormLabel>
                                    <Input
                                        size={"lg"}
                                        id="companyWebsite"
                                        {...register("companyWebsite", {
                                            required: "This is required",
                                            minLength: {
                                                value: 2,
                                                message:
                                                    "Minimum length should be 2",
                                            },
                                        })}
                                        type="text"
                                        placeholder="Company Website"
                                        mb="0.5rem"
                                    />
                                    <FormErrorMessage>
                                        {errors.companyWebsite?.message?.toString()}
                                    </FormErrorMessage>
                                </FormControl>
                            </Stack>
                            <Stack
                                direction={["column", "row"]}
                                width={"100%"}
                                gap={{ base: 0, md: "0.5rem" }}
                            >
                                <FormControl
                                    isInvalid={errors.companyLogo !== undefined}
                                    mb={"1rem"}
                                >
                                    <FormLabel
                                        htmlFor="companyLogo"
                                        display={"none"}
                                    >
                                        Company Logo
                                    </FormLabel>
                                    <Button
                                        className="button-upload"
                                        onClick={handleClick}
                                        bg={"upfront.300"}
                                        _hover={{
                                            bg: "upfront.200",
                                        }}
                                        color="white"
                                        mb="0.5rem"
                                    >
                                        <AddIcon mr="0.5rem" />
                                        Upload Company Logo
                                    </Button>
                                    <Input
                                        type="file"
                                        accept="image/*"
                                        id="companyLogo"
                                        {...register("companyLogo", {
                                            required: "This is required",
                                            onChange: fileUploadInputChange,
                                        })}
                                        ref={hiddenFileInput}
                                        style={{ display: "none" }} // Make the file input element invisible
                                    />
                                    {fileName && <Text>{fileName}</Text>}
                                    <FormErrorMessage>
                                        {errors.companyLogo?.message?.toString()}
                                    </FormErrorMessage>
                                </FormControl>
                            </Stack>

                            <FormControl
                                isInvalid={errors.description !== undefined}
                                mb={"1rem"}
                            >
                                <FormLabel
                                    htmlFor="description"
                                    display={"none"}
                                >
                                    Description
                                </FormLabel>
                                <SimpleMdeReact
                                    id="description"
                                    {...register("description", {
                                        required: "This is required",
                                    })}
                                    style={{
                                        width: "100%",
                                    }}
                                    onChange={onChange}
                                />
                                <FormErrorMessage>
                                    {errors.description?.message?.toString()}
                                </FormErrorMessage>
                            </FormControl>

                            <FormControl
                                isInvalid={errors.visaSponsorship !== undefined}
                                mb={"1rem"}
                            >
                                <FormLabel
                                    htmlFor="visaSponsorship"
                                    display={"none"}
                                >
                                    Visa Sponsorship
                                </FormLabel>
                                <Checkbox
                                    size={"lg"}
                                    id="visaSponsorship"
                                    {...register("visaSponsorship", {})}
                                >
                                    VISA Sponsorship offered?
                                </Checkbox>
                            </FormControl>

                            <FormControl
                                isInvalid={errors.howToApply !== undefined}
                                mb={"1rem"}
                            >
                                <FormLabel
                                    htmlFor="howToApply"
                                    display={"none"}
                                >
                                    How To Apply
                                </FormLabel>
                                <Input
                                    size="lg"
                                    type="url"
                                    id="howToApply"
                                    placeholder="How to apply (Email or URL)"
                                    {...register("howToApply", {
                                        required: "This is required",
                                        minLength: {
                                            value: 2,
                                            message:
                                                "Minimum length should be 2",
                                        },
                                    })}
                                />
                                <FormErrorMessage>
                                    {errors.howToApply?.message?.toString()}
                                </FormErrorMessage>
                            </FormControl>
                            <FormControl
                                isInvalid={errors.yourEmail !== undefined}
                                mb={"1rem"}
                            >
                                <FormLabel htmlFor="yourEmail" display={"none"}>
                                    Your Email
                                </FormLabel>
                                <Input
                                    size="lg"
                                    type="email"
                                    placeholder="Your email (will be used to log in)"
                                    id="yourEmail"
                                    {...register("yourEmail", {
                                        required: "This is required",
                                        minLength: {
                                            value: 2,
                                            message:
                                                "Minimum length should be 2",
                                        },
                                    })}
                                />
                                <FormErrorMessage>
                                    {errors.yourEmail?.message?.toString()}
                                </FormErrorMessage>
                            </FormControl>
                        </Stack>
                    </form>
                </Box>
            </Layout>
        </>
    );
}

type Currency =
    | "GBP"
    | "USD"
    | "EUR"
    | "AUD"
    | "CAD"
    | "SGD"
    | "CHF"
    | "INR"
    | "JPY";

const currencySymbols: Record<Currency, string> = {
    GBP: "£",
    USD: "$",
    EUR: "€",
    AUD: "A$",
    CAD: "C$",
    SGD: "S$",
    CHF: "CHF",
    INR: "₹",
    JPY: "¥",
};

function getCurrencySymbol(currency: Currency): string {
    return currencySymbols[currency];
}

interface JobPostProps {
    companyLogo: string;
    companyName: string;
    companyWebsite: string;
    currency: Currency;
    description: string;
    howToApply: string;
    location: string;
    maxSalary: string;
    minSalary: string;
    title: string;
    visaSponsorship: false;
    yourEmail: string;
}

const JobPost = ({
    companyLogo,
    companyName,
    companyWebsite,
    currency,
    description,
    howToApply,
    location,
    maxSalary,
    minSalary,
    title,
    visaSponsorship,
    yourEmail,
}: JobPostProps) => {
    const currencySymbol = getCurrencySymbol(currency);
    return (
        <Box
            border={"1px solid"}
            borderRadius="5px"
            borderColor={"upfront.300"}
            padding="1rem"
            width="100%"
        >
            <HStack gap={{ base: "0.5rem", md: "1rem" }}>
                <Box
                    borderRadius="5px"
                    minWidth={{ base: "50px", md: "100px" }}
                    height={{ base: "50px", md: "100px" }}
                >
                    {companyLogo ? (
                        <Image
                            src={companyLogo}
                            minWidth={{ base: "50px", md: "100px" }}
                            height={{ base: "50px", md: "100px" }}
                            borderRadius={"5px"}
                            alt="Company logo"
                        />
                    ) : (
                        <Image
                            src={"/upfront/svg/logo-color-small.svg"}
                            minWidth={{ base: "50px", md: "100px" }}
                            height={{ base: "50px", md: "100px" }}
                            borderRadius={"5px"}
                            alt="Company logo"
                        />
                    )}
                </Box>

                <Stack alignItems={"left"} direction={["column", "row"]}>
                    <Box>
                        <Text fontSize={{ base: "1rem", md: "2rem" }}>
                            <Text
                                as="span"
                                fontWeight="800"
                                color={"upfront.300"}
                            >
                                {title === "" ? "Job Title" : title}
                            </Text>
                            {` @ `}
                            <Text
                                as="span"
                                fontWeight="800"
                                color={"upfront.300"}
                            >
                                {companyName === ""
                                    ? "Company Name"
                                    : companyName}
                            </Text>
                        </Text>
                        <Text fontSize={{ base: "1rem", md: "1.25rem" }}>
                            <Icon
                                width="0.5em"
                                as={FaMapPin}
                                color="upfront.300"
                                mr="0.5rem"
                            />
                            {location === "" ? "London, UK" : location} | 1 hour
                            ago
                        </Text>
                        <Text fontSize={{ base: "1rem", md: "1.5rem" }}>
                            {`${currencySymbol}${
                                minSalary === "" ? 0 : minSalary
                            } to ${currencySymbol}${
                                maxSalary === "" ? 0 : maxSalary
                            }`}{" "}
                            per annum
                        </Text>
                    </Box>
                </Stack>
            </HStack>
        </Box>
    );
};
